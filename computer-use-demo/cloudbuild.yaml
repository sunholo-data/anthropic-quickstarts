substitutions:
  _IMAGE_NAME: anthropic-computer
  _SERVICE_NAME: anthropic-computer
  _BUILD_DIR: computer-use-demo/
  _ARTIFACT_REGISTRY_REPO_URL: terraform_managed
  _REGION: terraform_managed
  _PROJECT_ID: terraform_managed
  _ANTHROPIC_BUCKET: multivac-internal-dev-dev-anthropic-computer 

tags: ['${_PROJECT_ID}', '${_SERVICE_NAME}']

options:
  logging: GCS_ONLY
logsBucket: gs://multivac-deploy-logging-bucket


steps:
  - name: 'gcr.io/cloud-builders/docker'
    entrypoint: 'bash'
    dir: ${_BUILD_DIR}
    args:
    - '-c'
    - |
      cat <<EOF >Dockerfile_cloudrun
      FROM docker.io/ubuntu:22.04

      ENV DEBIAN_FRONTEND=noninteractive
      ENV DEBIAN_PRIORITY=high

      RUN apt-get update && \
          apt-get -y upgrade && \
          apt-get -y install \
          build-essential \
          # UI Requirements
          xvfb \
          xterm \
          xdotool \
          scrot \
          imagemagick \
          sudo \
          mutter \
          x11vnc \
          # Python/pyenv reqs
          build-essential \
          libssl-dev  \
          zlib1g-dev \
          libbz2-dev \
          libreadline-dev \
          libsqlite3-dev \
          curl \
          git \
          libncursesw5-dev \
          xz-utils \
          tk-dev \
          libxml2-dev \
          libxmlsec1-dev \
          libffi-dev \
          liblzma-dev \
          # Network tools
          net-tools \
          netcat \
          # PPA req
          software-properties-common && \
          # Userland apps
          sudo add-apt-repository ppa:mozillateam/ppa && \
          sudo apt-get install -y --no-install-recommends \
          libreoffice \
          firefox-esr \
          x11-apps \
          xpdf \
          gedit \
          xpaint \
          tint2 \
          galculator \
          pcmanfm \
          unzip && \
          apt-get clean

      # Install noVNC
      RUN git clone --branch v1.5.0 https://github.com/novnc/noVNC.git /opt/noVNC && \
          git clone --branch v0.12.0 https://github.com/novnc/websockify /opt/noVNC/utils/websockify && \
          ln -s /opt/noVNC/vnc.html /opt/noVNC/index.html

      # setup user
      ENV USERNAME=computeruse
      ENV HOME=/home/$$USERNAME
      RUN useradd -m -s /bin/bash -d $$HOME $$USERNAME
      RUN echo "$${USERNAME} ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
      USER computeruse
      WORKDIR $$HOME

      # setup python
      RUN git clone https://github.com/pyenv/pyenv.git ~/.pyenv && \
          cd ~/.pyenv && src/configure && make -C src && cd .. && \
          echo 'export PYENV_ROOT="$HOME/.pyenv"' >> ~/.bashrc && \
          echo 'command -v pyenv >/dev/null || export PATH="$$PYENV_ROOT/bin:$$PATH"' >> ~/.bashrc && \
          echo 'eval "$$(pyenv init -)"' >> ~/.bashrc
      ENV PYENV_ROOT="$$HOME/.pyenv"
      ENV PATH="$$PYENV_ROOT/bin:$$PATH"
      ENV PYENV_VERSION_MAJOR=3
      ENV PYENV_VERSION_MINOR=11
      ENV PYENV_VERSION_PATCH=6
      ENV PYENV_VERSION=$$PYENV_VERSION_MAJOR.$$PYENV_VERSION_MINOR.$$PYENV_VERSION_PATCH
      RUN eval "$$(pyenv init -)" && \
          pyenv install $$PYENV_VERSION && \
          pyenv global $$PYENV_VERSION && \
          pyenv rehash

      ENV PATH="$$HOME/.pyenv/shims:$$HOME/.pyenv/bin:$$PATH"

      RUN python -m pip install --upgrade pip==23.1.2 setuptools==58.0.4 wheel==0.40.0 && \
          python -m pip config set global.disable-pip-version-check true

      # only reinstall if requirements.txt changes
      COPY --chown=$$USERNAME:$$USERNAME computer_use_demo/requirements.txt $$HOME/computer_use_demo/requirements.txt
      RUN python -m pip install -r $$HOME/computer_use_demo/requirements.txt

      # setup desktop env & app
      COPY --chown=$$USERNAME:$$USERNAME image/ $$HOME
      COPY --chown=$$USERNAME:$$USERNAME computer_use_demo/ $$HOME/computer_use_demo/

      ARG DISPLAY_NUM=1
      ARG HEIGHT=768
      ARG WIDTH=1024
      ENV DISPLAY_NUM=$$DISPLAY_NUM
      ENV HEIGHT=$$HEIGHT
      ENV WIDTH=$$WIDTH

      # Vertex specific
      ENV API_PROVIDER=vertex 
      ENV CLOUD_ML_REGION=${_REGION}
      ENV ANTHROPIC_VERTEX_PROJECT_ID=${_PROJECT_ID}

      ENTRYPOINT [ "./entrypoint.sh" ]

      EOF
  # Step 1: Build the Docker image
  - name: 'gcr.io/cloud-builders/docker'
    dir: ${_BUILD_DIR}
    args: ['build', 
            '-t', '${_ARTIFACT_REGISTRY_REPO_URL}/${_IMAGE_NAME}/${_SERVICE_NAME}:${BRANCH_NAME}', 
            '-f', 'Dockerfile_cloudrun', '.', 
            '--network=cloudbuild']
  
  # Step 2: Push the Docker image to Google Container Registry (GCR)
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', '${_ARTIFACT_REGISTRY_REPO_URL}/${_IMAGE_NAME}/${_SERVICE_NAME}:${BRANCH_NAME}']
  
  # Step 3: Deploy the container to Google Cloud Run
  - name: "gcr.io/cloud-builders/gcloud"
    id: deploy cloud run
    dir: ${_BUILD_DIR}
    entrypoint: bash
    args:
      - "-c"
      - |
        gcloud run deploy ${_SERVICE_NAME} --image ${_ARTIFACT_REGISTRY_REPO_URL}/${_IMAGE_NAME}/${_SERVICE_NAME}:${BRANCH_NAME} \
           --region ${_REGION} \
           --project ${_PROJECT_ID} \
           --platform managed \
           --memory 4Gi \
           --cpu 2 \
           --min-instances 0 \
           --max-instances 1 \
           --session-affinity \
           --update-secrets=ANTHROPIC_API_KEY=ANTHROPIC_API_KEY:latest \
           --timeout=25m \
           --add-volume name=gcs_anthropic,type=cloud-storage,bucket=${_ANTHROPIC_BUCKET},readonly=false \
           --add-volume-mount volume=gcs_anthropic,mount-path=/home/computeruse/.anthropic

